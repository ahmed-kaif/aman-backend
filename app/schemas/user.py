# app/schemas/user.py
from pydantic import BaseModel, HttpUrl, Field
from typing import Optional
from datetime import datetime
from enum import Enum

# An enumeration for gender for robust validation
class Gender(str, Enum):
    MALE = "Male"
    FEMALE = "Female"
    OTHER = "Other"

# Shared properties - fields that can be provided by the client
class UserBase(BaseModel):
    name: str = Field(..., min_length=2, max_length=50, example="John Doe")
    age: Optional[int] = Field(..., gt=0, lt=120, example=30)
    gender: Optional[Gender] = Field(..., example=Gender.MALE)
    location: Optional[str] = Field(..., example="New York, USA")
    description: Optional[str] = Field(None, example="A brief description of the user.")
    image_url: Optional[HttpUrl] = Field(None, example="http://example.com/image.png")
    voice_url: Optional[HttpUrl] = Field(None, example="http://example.com/voice.mp3")


# Properties to receive via API on creation
class UserCreate(UserBase):
    pass # All fields are inherited and required


# Properties to receive via API on update
# All fields are optional for partial updates (PATCH)
class UserUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=2, max_length=50, example="John Doe")
    age: Optional[int] = Field(None, gt=0, lt=120, example=30)
    gender: Optional[Gender] = Field(None, example=Gender.MALE)
    location: Optional[str] = Field(None, example="New York, USA")
    description: Optional[str] = Field(None, example="A new description.")
    image_url: Optional[HttpUrl] = Field(None, example="http://example.com/new_image.png")
    voice_url: Optional[HttpUrl] = Field(None, example="http://example.com/new_voice.mp3")


# Properties stored in DB and returned by API
# Includes fields generated by the database (id, created_at)
class User(UserBase):
    id: int
    created_at: datetime

    class Config:
        from_attributes = True
